{"version":3,"sources":["SugarAlcoholCalculator.js","serviceWorker.js","index.js"],"names":["Layout","props","react_default","a","createElement","Container","Row","Col","sm","md","lg","xl","style","margin","children","SugarAlcoholCalculator","_useState","useState","_useState2","Object","slicedToArray","quantity","setQuantity","_useState3","_useState4","unit","setUnit","_useState5","_useState6","drink","setDrink","_useState7","_useState8","editABV","setEditABV","_useState9","beer","wine","spirit","_useState10","ABV","setABV","useEffect","console","log","drinks","type","label","concat","measurements","pint","glass","bottle","shot","ml","oz","checkIfOz","input","checkIfUnit","units","calories","gramsPerUnit","rdaSugar","Math","floor","marsBars","toFixed","minsOfWalking","mlPerUnit","mlToOz","SugarAlcoholCalculator_Layout","backgroundColor","className","padding","xs","paddingRight","Input","name","onChange","event","target","value","min","defaultValue","map","marginTop","Button","color","hidden","onClick","width","float","marginRight","test","objectSpread","defineProperty","Progress","Boolean","window","location","hostname","match","ReactDOM","render","src_SugarAlcoholCalculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAIMA,SAAS,SAACC,GAAD,OACbC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,MAAO,CAAEC,OAAQ,SAChDZ,EAAMa,cAqMAC,MAhMf,WAAkC,IAAAC,EACAC,mBAAS,GADTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBK,EADyBH,EAAA,GACfI,EADeJ,EAAA,GAAAK,EAERN,mBAAS,QAFDO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEzBE,EAFyBD,EAAA,GAEnBE,EAFmBF,EAAA,GAAAG,EAGNV,mBAAS,QAHHW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGzBE,EAHyBD,EAAA,GAGlBE,EAHkBF,EAAA,GAAAG,EAIFd,oBAAS,GAJPe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAIzBE,EAJyBD,EAAA,GAIhBE,EAJgBF,EAAA,GAAAG,EAKVlB,mBAAS,CAC7BmB,KAAQ,EACRC,KAAQ,GACRC,OAAU,KARoBC,EAAApB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAKzBK,EALyBD,EAAA,GAKpBE,EALoBF,EAAA,GAWhCG,oBAAU,WACRC,QAAQC,IAAIvB,KAGd,IAAMwB,EAAS,CACb,CAAEC,KAAM,OAAQC,MAAK,SAAAC,OAAWR,EAAIJ,KAAf,UAA6BX,KAAM,QACxD,CAAEqB,KAAM,OAAQC,MAAK,SAAAC,OAAWR,EAAIH,KAAf,MAAyBZ,KAAM,SACpD,CAAEqB,KAAM,SAAUC,MAAK,WAAAC,OAAaR,EAAIF,OAAjB,UAAiCb,KAAM,SAQ1DwB,EAAe,CACnBC,KAAQ,QACRC,MAAS,IACTC,OAAU,IACVC,KAAQ,GACRC,GAAM,EACNC,GAAM,QACN9B,KAAQ,CACNW,KAAQ,IACRC,KAAQ,OACRC,OAAU,KAmBRkB,EAAY,SAAAC,GAAK,OAAIA,GACrBC,EAAc,SAACD,GAAD,MAAqB,SAAThC,EAAmBwB,EAAaxB,KAAKI,GAAS4B,GACxEE,EAAStC,EAAWqC,EAAYT,EAAaxB,KAAUe,EAAIX,GAAS,KAC1Ec,QAAQC,IAAIe,GACZhB,QAAQC,IAAI,aAAcvB,EAAU,kBAAmB4B,EAAaxB,GAAO,gBAAiB+B,EAAUhB,EAAIX,GAAS,MACnH,IACM+B,EAAWD,EADOH,EAAU,GAxCZ,CACpBpB,KAAQ,QACRC,KAAQ,kBACRC,OAAU,GAqCyCT,IAE/CgC,EAAeD,EAAW,KAG1BE,EAAWC,KAAKC,MAAOH,EAAgB,MAAQ,KAC/CI,EAA+C,GAAnCJ,EAAe,OAAOK,QAAQ,GAE1CC,EAAgBJ,KAAKC,MAAiB,KAAXJ,GAC3BQ,EAAYL,KAAKC,MAAM3C,EAAWqC,EAAYT,EAAaxB,KAC3D4C,GAAsB,UAAZD,GAAwBF,QAAQ,GAIhD,OAFAvB,QAAQC,IAAIvB,EAAUI,EAAMI,GAG1B3B,EAAAC,EAAAC,cAACkE,EAAD,KACEpE,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKM,MAAO,CAAE2D,gBAAiB,YAC7BrE,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAAA,UAAQoE,UAAU,cAChBtE,EAAAC,EAAAC,cAAA,yCAINF,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKK,MAAO,CAAE6D,QAAS,SAAvB,wDAIFvE,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKkE,UAAU,cACbtE,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKmE,GAAG,IAAI9D,MAAO,CAAE+D,aAAc,WACjCzE,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CACEC,KAAK,WACL/B,KAAK,SACLgC,SAAU,SAACC,GAAD,OAAWzD,EAAYyD,EAAMC,OAAOC,QAC9CA,MAAO5D,EACP6D,IAAI,IACJC,aAAa,OAGjBjF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKmE,GAAG,IAAI9D,MAAO,CAAE+D,aAAc,WACjCzE,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAO9B,KAAK,SAASmC,MAAOxD,EAAMqD,SAAU,SAACC,GAAD,OAAWrD,EAAQqD,EAAMC,OAAOC,SA7DlE,CAChB,CAAEnC,KAAM,OAAQC,MAAO,eAAgBF,OAAQ,oBAC/C,CAAEC,KAAM,QAASC,MAAO,gBAAiBF,OAAQ,oBACjD,CAAEC,KAAM,SAAUC,MAAO,iBAAkBF,OAAQ,QACnD,CAAEC,KAAM,OAAQC,MAAO,cAAeF,OAAQ,oBAC9C,CAAEC,KAAM,KAAMC,MAAO,mBAAoBF,OAAQ,oBACjD,CAAEC,KAAM,KAAMC,MAAO,cAAeF,OAAQ,oBAC5C,CAAEC,KAAM,OAAQC,MAAO,YAAaF,OAAQ,qBAuDzBuC,IAAI,SAAA3D,GAAI,OACjBvB,EAAAC,EAAAC,cAAA,UAAoD6E,MAAOxD,EAAKqB,MAAOrB,EAAKsB,WAIlF7C,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKmE,GAAG,KACNxE,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CACE9B,KAAK,SACLmC,MAAOpD,EACPiD,SAAU,SAACC,GACTjD,EAASiD,EAAMC,OAAOC,SAGvBpC,EAAOuC,IAAI,SAAAvD,GAAK,OAAI3B,EAAAC,EAAAC,cAAA,UAAQ6E,MAAOpD,EAAMiB,MAAOjB,EAAMkB,YAI7D7C,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKM,MAAO,CAAEyE,UAAW,YACvBnF,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKkE,UAAU,cACbtE,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKmE,GAAG,KACNxE,EAAAC,EAAAC,cAAA,SAAKoD,EAAUK,GAAgB,IAAoD,EAA5CL,EAAUK,EAAe,KAAMK,QAAQ,GAAS,cAAqD,EAArCV,EAAUK,GAAcK,QAAQ,GAAS,oBAElJhE,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKmE,GAAG,KACNxE,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CACEC,MAAM,UACNC,QAASvD,EACTwD,QAAS,kBAAMvD,GAAYD,KAH7B,YAOA/B,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CACE9B,KAAK,SACLmC,MAAOzC,EAAIX,GACX2D,OAAQvD,EACRrB,MAAO,CAAE8E,MAAO,MAAOC,MAAO,OAAQC,YAAa,UACnDd,SACE,SAACC,GACC,IAAMtB,EAAQsB,EAAMC,OAAOC,MACb,4BACJY,KAAKpC,IACbhB,EAAOtB,OAAA2E,EAAA,EAAA3E,CAAA,GACFqB,EADCrB,OAAA4E,EAAA,EAAA5E,CAAA,GAEHU,EAAQkD,EAAMC,OAAOC,YAMhC/E,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAQE,OAAQvD,EAASwD,QAAS,kBAAMvD,GAAYD,KAApD,QAGJ/B,EAAAC,EAAAC,cAAA,SAA+C,GAA1CoD,EAAUK,GAAgB,GAAGK,QAAQ,GAA1C,mBACAhE,EAAAC,EAAAC,cAAA,SAAI0D,EAAJ,mBACA5D,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CACEf,MAAOnB,EACPlD,MAAO,CAAE8E,MAAO,OAChBH,MACGzB,EAAW,GACR,SACCA,EAAW,GACV,UACCA,EAAW,GACV,OACA,YAGZ5D,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,SAAI6D,EAAJ,8BACA/D,EAAAC,EAAAC,cAAA,SACI+D,EAAgB,GACoB,GAAjCA,EAAgB,IAAID,QAAQ,GAAS,oBACtCC,EAAgB,uBAGtBjE,EAAAC,EAAAC,cAAA,sBAAc2D,KAAKC,MAAMJ,IACzB1D,EAAAC,EAAAC,cAAA,SAAI2D,KAAKC,MAAMJ,EAAW,IAAO,KAAjC,iCACA1D,EAAAC,EAAAC,cAAA,gBAAQoD,EAAUY,IACP,SAAT3C,GAAoBvB,EAAAC,EAAAC,cAAA,oBAAqB,EAATiE,GAClCnE,EAAAC,EAAAC,cAAA,mBAA8B,EAAnBuD,EAAMO,QAAQ,MAG7BhE,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,cC1LU6F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOrG,EAAAC,EAAAC,cAACoG,EAAD,MAA4BC,SAASC,eAAe,SD0H9D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c904d180.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Col, Input, Progress, Button } from 'reactstrap'\r\nimport './App.css';\r\n\r\nconst Layout = (props) =>\r\n  <Container>\r\n    <Row>\r\n      <Col sm='10' md='7' lg='5' xl='5' style={{ margin: 'auto' }} >\r\n        {props.children}\r\n      </Col>\r\n    </Row>\r\n  </Container>\r\n\r\nfunction SugarAlcoholCalculator() {\r\n  const [quantity, setQuantity] = useState(0)\r\n  const [unit, setUnit] = useState('pint')\r\n  const [drink, setDrink] = useState('beer')\r\n  const [editABV, setEditABV] = useState(true)\r\n  const [ABV, setABV] = useState({\r\n    'beer': 5,\r\n    'wine': 13, //.1428\r\n    'spirit': 40\r\n  })\r\n\r\n  useEffect(() => {\r\n    console.log(quantity)\r\n  })\r\n\r\n  const drinks = [\r\n    { type: 'beer', label: `Beer (${ABV.beer}% ABV)`, unit: 'pint' },\r\n    { type: 'wine', label: `Wine (${ABV.wine}%)`, unit: 'glass' },\r\n    { type: 'spirit', label: `Spirit (${ABV.spirit}% ABV)`, unit: 'shot' }\r\n  ]\r\n  const extraCalories = {\r\n    'beer': 1.36871,\r\n    'wine': 1.282258064516129,\r\n    'spirit': 1\r\n  }\r\n  // Measurements input as ml value\r\n  const measurements = {\r\n    'pint': 568.261,\r\n    'glass': 175,\r\n    'bottle': 750,\r\n    'shot': 25,\r\n    'ml': 1,\r\n    'oz': 29.5735,\r\n    'unit': {\r\n      'beer': 200,\r\n      'wine': 76.086,\r\n      'spirit': 25\r\n    }\r\n  }\r\n  const unitTypes = [\r\n    { type: 'pint', label: 'Pint (568ml)', drinks: 'beer wine spirit' },\r\n    { type: 'glass', label: 'Glass (175ml)', drinks: 'beer wine spirit' },\r\n    { type: 'bottle', label: 'Bottle (750ml)', drinks: 'wine'},\r\n    { type: 'shot', label: 'Shot (25ml)', drinks: 'beer wine spirit' },\r\n    { type: 'ml', label: 'Milliletres (ml)', drinks: 'beer wine spirit'} ,\r\n    { type: 'oz', label: 'Ounces (US)', drinks: 'beer wine spirit' },\r\n    { type: 'unit', label: 'Unit (UK)', drinks: 'beer wine spirit' }\r\n  ]\r\n  const unitsPerMl = {\r\n    'beer': 5,\r\n    'wine': 13,\r\n    'spirit': 40\r\n  }\r\n\r\n  // const checkIfOz = (input) => (unit === 'oz') ? input * 1.136524 : input * 1\r\n  const checkIfOz = input => input\r\n  const checkIfUnit = (input) => (unit === 'unit') ? measurements.unit[drink] : input\r\n  const units = (quantity * checkIfUnit(measurements[unit]) * (ABV[drink] / 1000))\r\n  console.log(units)\r\n  console.log(\"quantity: \", quantity, \" measurements: \", measurements[unit], \" unitsPerMl: \", checkIfOz(ABV[drink] / 1000))\r\n  const caloriesOneUnit = checkIfOz(54 * extraCalories[drink])\r\n  const calories = units * caloriesOneUnit\r\n  const gramsPerUnit = calories / 3.87\r\n  // const gramsPerOunce = parseFloat((gramsPerUnit / 100) * 20) + parseFloat(gramsPerUnit)\r\n  // const caloriesPerUnit = (quantity * caloriesOneUnit).toFixed(2) * 1\r\n  const rdaSugar = Math.floor((gramsPerUnit) / 51.67 * 100)\r\n  const marsBars = (gramsPerUnit / 26.05).toFixed(1) * 1\r\n  // const minsOfFrisbee = ((quantity * extraCalories[drink]) * 20.06).toFixed(2)\r\n  const minsOfWalking = Math.floor(calories * 0.278)\r\n  const mlPerUnit = Math.floor(quantity * checkIfUnit(measurements[unit]))\r\n  const mlToOz = (mlPerUnit * 0.03519503).toFixed(2)\r\n\r\n  console.log(quantity, unit, drink)\r\n\r\n  return (\r\n    <Layout>\r\n      <Row style={{ backgroundColor: '#282c34' }}>\r\n        <Col>\r\n          <header className=\"App-header\">\r\n            <h1>Alcohol-Sugar Calculator</h1>\r\n          </header>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col style={{ padding: '1rem' }}>\r\n          Alcohol intake converted to relative sugar quantity\r\n        </Col>\r\n      </Row>\r\n      <Row className='no-gutters'>\r\n        <Col xs='3' style={{ paddingRight: '0.5rem' }}>\r\n          <Input\r\n            name='quantity'\r\n            type='number'\r\n            onChange={(event) => setQuantity(event.target.value)}\r\n            value={quantity}\r\n            min='0'\r\n            defaultValue='0'\r\n          />\r\n        </Col>\r\n        <Col xs='4' style={{ paddingRight: '0.5rem' }}>\r\n          <Input type='select' value={unit} onChange={(event) => setUnit(event.target.value)}>\r\n            {unitTypes.map(unit =>\r\n              <option /* hidden={!unit.drinks.includes(drink)} */ value={unit.type}>{unit.label}</option>\r\n            )}\r\n          </Input>\r\n        </Col>\r\n        <Col xs='5'>\r\n          <Input\r\n            type='select'\r\n            value={drink}\r\n            onChange={(event) => {\r\n              setDrink(event.target.value)\r\n              // drinks.forEach(drink => (drink.type === event.target.value) && setUnit(drink.unit))\r\n            }}>\r\n            {drinks.map(drink => <option value={drink.type}>{drink.label}</option>)}\r\n          </Input>\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginTop: '0.75rem' }}>\r\n        <Col /* style={{ padding: '1rem 0.25rem 0.25rem 1.5rem' }} */>\r\n          <Row className='no-gutters'>\r\n            <Col xs='7'>\r\n              <p>{(checkIfOz(gramsPerUnit) > 1000) ? checkIfOz(gramsPerUnit / 1000).toFixed(2) * 1 + 'kg of sugar' : checkIfOz(gramsPerUnit).toFixed(1) * 1 + ' grams of sugar'}</p>\r\n            </Col>\r\n            <Col xs='5'>\r\n              <Button\r\n                color='primary'\r\n                hidden={!editABV}\r\n                onClick={() => setEditABV(!editABV)}\r\n              >\r\n                Edit ABV\r\n              </Button>\r\n              <Input\r\n                type='number'\r\n                value={ABV[drink]}\r\n                hidden={editABV}\r\n                style={{ width: '50%', float: 'left', marginRight: '0.2rem' }}\r\n                onChange={\r\n                  (event) => {\r\n                    const input = event.target.value\r\n                    const regex = /^(\\d{1,3})?(\\.?\\d{1,2})?$/\r\n                    if (regex.test(input)) {\r\n                      setABV({\r\n                        ...ABV,\r\n                        [drink]: event.target.value\r\n                      })\r\n                    }\r\n                  }\r\n                }\r\n              />\r\n              <Button hidden={editABV} onClick={() => setEditABV(!editABV)}>OK</Button>\r\n            </Col>\r\n          </Row>\r\n          <p>{(checkIfOz(gramsPerUnit) / 3).toFixed(1) * 1} cubes of sugar</p>\r\n          <p>{rdaSugar}% RDA for sugar</p>\r\n          <Progress\r\n            value={rdaSugar}\r\n            style={{ width: '90%' }}\r\n            color={\r\n              (rdaSugar > 75)\r\n                ? 'danger'\r\n                : (rdaSugar > 50)\r\n                  ? 'warning'\r\n                  : (rdaSugar > 25)\r\n                    ? 'info'\r\n                    : 'success'\r\n            }\r\n          />\r\n          <p></p>\r\n          <p>{marsBars} mars bars (sugar content)</p>\r\n          <p>\r\n            {(minsOfWalking > 60)\r\n              ? (minsOfWalking / 60).toFixed(1) * 1 + ' hours of walking'\r\n              : minsOfWalking + ' minutes of walking'\r\n            }\r\n          </p>\r\n          <p>Calories: {Math.floor(calories)}</p>\r\n          <p>{Math.floor(calories / 2000 * 100)}% RDA of calories (2000/kcal)</p>\r\n          <p>ml: {checkIfOz(mlPerUnit)}</p>\r\n          {(unit === 'unit') && <p>Ounces: {mlToOz * 1}</p>}\r\n          <p>Units: {units.toFixed(1) * 1}</p>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <footer>\r\n          <p></p>\r\n        </footer>\r\n      </Row>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default SugarAlcoholCalculator;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SugarAlcoholCalculator from './SugarAlcoholCalculator';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<SugarAlcoholCalculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}