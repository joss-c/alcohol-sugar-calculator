{"version":3,"sources":["SugarAlcoholCalculator.js","serviceWorker.js","index.js"],"names":["Layout","props","react_default","a","createElement","Container","Row","Col","sm","md","lg","xl","style","margin","children","SugarAlcoholCalculator","_useState","useState","_useState2","Object","slicedToArray","quantity","setQuantity","_useState3","_useState4","unit","setUnit","_useState5","_useState6","drink","setDrink","useEffect","console","log","drinks","type","label","measurements","pint","glass","shot","beer","wine","spirit","unitsPerMl","checkIfOz","input","checkIfUnit","units","calories","gramsPerUnit","rdaSugar","Math","floor","marsBars","toFixed","minsOfWalking","mlPerUnit","mlToOz","SugarAlcoholCalculator_Layout","backgroundColor","className","padding","paddingRight","maxWidth","Input","name","onChange","event","target","value","min","defaultValue","map","hidden","includes","forEach","Progress","width","color","Boolean","window","location","hostname","match","ReactDOM","render","src_SugarAlcoholCalculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAIMA,SAAS,SAACC,GAAD,OACbC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,MAAO,CAAEC,OAAQ,SAChDZ,EAAMa,cAuJAC,MAlJf,WAAkC,IAAAC,EACAC,mBAAS,GADTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBK,EADyBH,EAAA,GACfI,EADeJ,EAAA,GAAAK,EAERN,mBAAS,QAFDO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEzBE,EAFyBD,EAAA,GAEnBE,EAFmBF,EAAA,GAAAG,EAGNV,mBAAS,QAHHW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGzBE,EAHyBD,EAAA,GAGlBE,EAHkBF,EAAA,GAKhCG,oBAAU,WACRC,QAAQC,IAAIZ,KAGd,IAAMa,EAAS,CACb,CAAEC,KAAM,OAAQC,MAAO,gBAAiBX,KAAM,QAC9C,CAAEU,KAAM,SAAUC,MAAO,mBAAoBX,KAAM,QACnD,CAAEU,KAAM,OAAQC,MAAO,aAAcX,KAAM,UAOvCY,EAAe,CACnBC,KAAQ,QACRC,MAAS,IACTC,KAAQ,GACRf,KAAQ,CACNgB,KAAQ,IACRC,KAAQ,OACRC,OAAU,KASRC,EAAa,CACjBH,KAAQ,KACRC,KAAQ,SACRC,OAAU,KAGNE,EAAY,SAACC,GAAD,MAAqB,OAATrB,EAAyB,SAARqB,EAA2B,EAARA,GAC5DC,EAAc,SAACD,GAAD,MAAqB,SAATrB,EAAmBY,EAAaZ,KAAKI,GAASiB,GACxEE,EAAS3B,EAAW0B,EAAYV,EAAaZ,IAASmB,EAAWf,GACvEG,QAAQC,IAAIe,GACZhB,QAAQC,IAAI,aAAcZ,EAAU,kBAAmBgB,EAAaZ,GAAO,gBAAiBoB,EAAUD,EAAWf,KACjH,IACMoB,EAAWD,EADOH,EAAU,GAhCZ,CACpBJ,KAAQ,QACRC,KAAQ,OACRC,OAAU,GA6ByCd,IAE/CqB,EAAeD,EAAW,KAG1BE,EAAWC,KAAKC,MAAOH,EAAgB,MAAQ,KAC/CI,EAA+C,GAAnCJ,EAAe,OAAOK,QAAQ,GAE1CC,EAAgBJ,KAAKC,MAAiB,KAAXJ,GAC3BQ,EAAYL,KAAKC,MAAMhC,EAAW0B,EAAYV,EAAaZ,KAC3DiC,GAAsB,UAAZD,GAAwBF,QAAQ,GAIhD,OAFAvB,QAAQC,IAAIZ,EAAUI,EAAMI,GAG1B3B,EAAAC,EAAAC,cAACuD,EAAD,KACEzD,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKM,MAAO,CAAEgD,gBAAiB,YAC7B1D,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAAA,UAAQyD,UAAU,cAChB3D,EAAAC,EAAAC,cAAA,yCAINF,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKK,MAAO,CAAEkD,QAAS,SAAvB,wDAIF5D,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKuD,UAAU,cACb3D,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKK,MAAO,CAAEmD,aAAc,SAAUC,SAAU,SAC9C9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACEC,KAAK,WACL/B,KAAK,SACLgC,SAAU,SAACC,GAAD,OAAW9C,EAAY8C,EAAMC,OAAOC,QAC9CA,MAAOjD,EACPkD,IAAI,IACJC,aAAa,OAGjBtE,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKK,MAAO,CAAEmD,aAAc,SAAUC,SAAU,SAC9C9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAO9B,KAAK,SAASmC,MAAO7C,EAAM0C,SAAU,SAACC,GAAD,OAAW1C,EAAQ0C,EAAMC,OAAOC,SAzDlE,CAChB,CAAEnC,KAAM,OAAQC,MAAO,eAAgBF,OAAQ,QAC/C,CAAEC,KAAM,QAASC,MAAO,gBAAiBF,OAAQ,QACjD,CAAEC,KAAM,OAAQC,MAAO,cAAeF,OAAQ,UAC9C,CAAEC,KAAM,OAAQC,MAAO,YAAaF,OAAQ,gBAsDzBuC,IAAI,SAAAhD,GAAI,OACjBvB,EAAAC,EAAAC,cAAA,UAAQsE,QAASjD,EAAKS,OAAOyC,SAAS9C,GAAQyC,MAAO7C,EAAKU,MAAOV,EAAKW,WAI5ElC,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACE9B,KAAK,SACLmC,MAAOzC,EACPsC,SAAU,SAACC,GACTtC,EAASsC,EAAMC,OAAOC,OACtBpC,EAAO0C,QAAQ,SAAA/C,GAAK,OAAKA,EAAMM,OAASiC,EAAMC,OAAOC,OAAU5C,EAAQG,EAAMJ,UAE5ES,EAAOuC,IAAI,SAAA5C,GAAK,OAAI3B,EAAAC,EAAAC,cAAA,UAAQkE,MAAOzC,EAAMM,MAAON,EAAMO,YAI/DlC,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKK,MAAO,CAAEkD,QAAS,gCACrB5D,EAAAC,EAAAC,cAAA,SAAKyC,EAAUK,GAAgB,IAAoD,EAA5CL,EAAUK,EAAe,KAAMK,QAAQ,GAAS,cAAqD,EAArCV,EAAUK,GAAcK,QAAQ,GAAS,mBAChJrD,EAAAC,EAAAC,cAAA,SAA+C,GAA1CyC,EAAUK,GAAgB,GAAGK,QAAQ,GAA1C,mBACArD,EAAAC,EAAAC,cAAA,SAAI+C,EAAJ,mBACAjD,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CACEP,MAAOnB,EACPvC,MAAO,CAAEkE,MAAO,OAChBC,MACG5B,EAAW,GACR,SACCA,EAAW,GACV,UACCA,EAAW,GACV,OACA,YAGZjD,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,SAAIkD,EAAJ,8BACApD,EAAAC,EAAAC,cAAA,SACIoD,EAAgB,GACoB,GAAjCA,EAAgB,IAAID,QAAQ,GAAS,oBACtCC,EAAgB,uBAGtBtD,EAAAC,EAAAC,cAAA,sBAAcgD,KAAKC,MAAMJ,IACzB/C,EAAAC,EAAAC,cAAA,SAAIgD,KAAKC,MAAMJ,EAAW,IAAO,KAAjC,iCACA/C,EAAAC,EAAAC,cAAA,gBAAQyC,EAAUY,IACP,SAAThC,GAAoBvB,EAAAC,EAAAC,cAAA,oBAAqB,EAATsD,GAClCxD,EAAAC,EAAAC,cAAA,mBAA8B,EAAnB4C,EAAMO,QAAQ,MAG7BrD,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,cC5IU4E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOpF,EAAAC,EAAAC,cAACmF,EAAD,MAA4BC,SAASC,eAAe,SD0H9D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.73cdbb50.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Input, Progress } from 'reactstrap'\nimport './App.css';\n\nconst Layout = (props) =>\n  <Container>\n    <Row>\n      <Col sm='10' md='7' lg='5' xl='5' style={{ margin: 'auto' }} >\n        {props.children}\n      </Col>\n    </Row>\n  </Container>\n\nfunction SugarAlcoholCalculator() {\n  const [quantity, setQuantity] = useState(0)\n  const [unit, setUnit] = useState('pint')\n  const [drink, setDrink] = useState('beer')\n\n  useEffect(() => {\n    console.log(quantity)\n  })\n\n  const drinks = [\n    { type: 'beer', label: 'Beer (5% ABV)', unit: 'pint' },\n    { type: 'spirit', label: 'Spirit (40% ABV)', unit: 'shot' },\n    { type: 'wine', label: 'Wine (13%)', unit: 'glass' }\n  ]\n  const extraCalories = {\n    'beer': 1.36871,\n    'wine': 1.2823,\n    'spirit': 1\n  }\n  const measurements = {\n    'pint': 568.261,\n    'glass': 175,\n    'shot': 25,\n    'unit': {\n      'beer': 200,\n      'wine': 76.086,\n      'spirit': 25\n    }\n  }\n  const unitTypes = [\n    { type: 'pint', label: 'Pint (568ml)', drinks: 'beer' },\n    { type: 'glass', label: 'Glass (175ml)', drinks: 'wine' },\n    { type: 'shot', label: 'Shot (25ml)', drinks: 'spirit' },\n    { type: 'unit', label: 'Unit (UK)', drinks: 'beer spirit' }\n  ]\n  const unitsPerMl = {\n    'beer': 0.005,\n    'wine': 0.0131428,\n    'spirit': 0.04\n  }\n\n  const checkIfOz = (input) => (unit === 'oz') ? input * 1.136524 : input * 1\n  const checkIfUnit = (input) => (unit === 'unit') ? measurements.unit[drink] : input\n  const units = (quantity * checkIfUnit(measurements[unit]) * unitsPerMl[drink])\n  console.log(units)\n  console.log(\"quantity: \", quantity, \" measurements: \", measurements[unit], \" unitsPerMl: \", checkIfOz(unitsPerMl[drink]))\n  const caloriesOneUnit = checkIfOz(54 * extraCalories[drink])\n  const calories = units * caloriesOneUnit\n  const gramsPerUnit = calories / 3.87\n  // const gramsPerOunce = parseFloat((gramsPerUnit / 100) * 20) + parseFloat(gramsPerUnit)\n  // const caloriesPerUnit = (quantity * caloriesOneUnit).toFixed(2) * 1\n  const rdaSugar = Math.floor((gramsPerUnit) / 51.67 * 100)\n  const marsBars = (gramsPerUnit / 26.05).toFixed(1) * 1\n  // const minsOfFrisbee = ((quantity * extraCalories[drink]) * 20.06).toFixed(2)\n  const minsOfWalking = Math.floor(calories * 0.278)\n  const mlPerUnit = Math.floor(quantity * checkIfUnit(measurements[unit]))\n  const mlToOz = (mlPerUnit * 0.03519503).toFixed(2)\n\n  console.log(quantity, unit, drink)\n\n  return (\n    <Layout>\n      <Row style={{ backgroundColor: '#282c34' }}>\n        <Col>\n          <header className=\"App-header\">\n            <h1>Alcohol-Sugar Calculator</h1>\n          </header>\n        </Col>\n      </Row>\n      <Row>\n        <Col style={{ padding: '1rem' }}>\n          Alcohol intake converted to relative sugar quantity\n        </Col>\n      </Row>\n      <Row className='no-gutters'>\n        <Col style={{ paddingRight: '0.5rem', maxWidth: '5rem' }}>\n          <Input\n            name='quantity'\n            type='number'\n            onChange={(event) => setQuantity(event.target.value)}\n            value={quantity}\n            min='0'\n            defaultValue='0'\n          />\n        </Col>\n        <Col style={{ paddingRight: '0.5rem', maxWidth: '7rem' }}>\n          <Input type='select' value={unit} onChange={(event) => setUnit(event.target.value)}>\n            {unitTypes.map(unit =>\n              <option hidden={!unit.drinks.includes(drink)} value={unit.type}>{unit.label}</option>\n            )}\n          </Input>\n        </Col>\n        <Col>\n          <Input\n            type='select'\n            value={drink}\n            onChange={(event) => {\n              setDrink(event.target.value)\n              drinks.forEach(drink => (drink.type === event.target.value) && setUnit(drink.unit))\n            }}>\n              {drinks.map(drink => <option value={drink.type}>{drink.label}</option>)}\n          </Input>\n        </Col>\n      </Row>\n      <Row>\n        <Col style={{ padding: '1rem 0.25rem 0.25rem 1.5rem' }}>\n          <p>{(checkIfOz(gramsPerUnit) > 1000) ? checkIfOz(gramsPerUnit / 1000).toFixed(2) * 1 + 'kg of sugar' : checkIfOz(gramsPerUnit).toFixed(1) * 1 + ' grams of sugar'}</p>\n          <p>{(checkIfOz(gramsPerUnit) / 3).toFixed(1) * 1} cubes of sugar</p>\n          <p>{rdaSugar}% RDA for sugar</p>\n          <Progress\n            value={rdaSugar}\n            style={{ width: '90%' }}\n            color={\n              (rdaSugar > 75)\n                ? 'danger'\n                : (rdaSugar > 50)\n                  ? 'warning'\n                  : (rdaSugar > 25)\n                    ? 'info'\n                    : 'success'\n            }\n          />\n          <p></p>\n          <p>{marsBars} mars bars (sugar content)</p>\n          <p>\n            {(minsOfWalking > 60)\n              ? (minsOfWalking / 60).toFixed(1) * 1 + ' hours of walking'\n              : minsOfWalking + ' minutes of walking'\n            }\n          </p>\n          <p>Calories: {Math.floor(calories)}</p>\n          <p>{Math.floor(calories / 2000 * 100)}% RDA of calories (2000/kcal)</p>\n          <p>ml: {checkIfOz(mlPerUnit)}</p>\n          {(unit === 'unit') && <p>Ounces: {mlToOz * 1}</p>}\n          <p>Units: {units.toFixed(1) * 1}</p>\n        </Col>\n      </Row>\n      <Row>\n        <footer>\n          <p></p>\n        </footer>\n      </Row>\n    </Layout>\n  )\n}\n\nexport default SugarAlcoholCalculator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SugarAlcoholCalculator from './SugarAlcoholCalculator';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<SugarAlcoholCalculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}