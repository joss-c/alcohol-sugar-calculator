{"version":3,"sources":["SugarAlcoholCalculator.js","serviceWorker.js","index.js"],"names":["Layout","props","react_default","a","createElement","Container","Row","Col","sm","md","lg","xl","style","margin","children","SugarAlcoholCalculator","_useState","useState","_useState2","Object","slicedToArray","unit","setUnit","_useState3","_useState4","selectedUnit","selectUnit","_useState5","_useState6","drink","setDrink","useEffect","console","log","drinkTypes","spirit","beer","caloriesOneUnit","gramsPerUnit","toFixed","unitTypes","oz","parseFloat","caloriesPerUnit","minsOfWalking","Math","floor","mlPerUnit","mlToOz","checkIfOz","input","SugarAlcoholCalculator_Layout","backgroundColor","className","padding","paddingRight","maxWidth","Input","name","type","onChange","event","target","value","min","defaultValue","Boolean","window","location","hostname","match","ReactDOM","render","src_SugarAlcoholCalculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da40daf2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Input } from 'reactstrap'\nimport './App.css';\n\nconst Layout = (props) =>\n  <Container>\n    <Row>\n      <Col sm='10' md='7' lg='5' xl='5' style={{ margin: 'auto' }} >\n        {props.children}\n      </Col>\n    </Row>\n  </Container>\n\nfunction SugarAlcoholCalculator() {\n  const [unit, setUnit] = useState(0)\n  const [selectedUnit, selectUnit] = useState('unit')\n  const [drink, setDrink] = useState('spirit')\n\n  useEffect(() => {\n    console.log(unit)\n  })\n\n  const drinkTypes = {\n    'spirit': 1,\n    'beer': 1.6\n  }\n  const caloriesOneUnit = 54 * drinkTypes[drink]\n  const gramsPerUnit = (unit * caloriesOneUnit / 4).toFixed(2)\n  const unitTypes = {\n    'unit': gramsPerUnit,\n    'oz': parseFloat((gramsPerUnit / 100) * 20) + parseFloat(gramsPerUnit)\n  }\n  const gramsPerOunce = parseFloat((gramsPerUnit / 100) * 20) + parseFloat(gramsPerUnit)\n  const caloriesPerUnit = (unit * caloriesOneUnit).toFixed(2)\n  const minsOfFrisbee = ((unit * drinkTypes[drink]) * 20.06).toFixed(2)\n  const minsOfWalking = Math.floor(caloriesPerUnit * 0.278)\n  const mlPerUnit = ((unit * 25) * ((drink === 'beer') ? 8 : 1)).toFixed(2)\n  const mlToOz = (mlPerUnit * 0.03519503).toFixed(2)\n  const checkIfOz = (input) => (selectedUnit === 'unit' ? input * 1 : (input * 1.136524).toFixed(2) * 1)\n  return (\n    <Layout>\n      <Row style={{ backgroundColor: '#282c34' }}>\n        <Col>\n          <header className=\"App-header\">\n            <h1>Alcohol-Sugar Calculator</h1>\n          </header>\n        </Col>\n      </Row>\n      <Row>\n        <Col style={{ padding: '1rem' }}>\n          Alcohol intake converted to relative sugar quantity\n        </Col>\n      </Row>\n      <Row className='no-gutters'>\n        <Col style={{ paddingRight: '0.5rem', maxWidth: '5rem' }}>\n          <Input\n            name='units'\n            type='number'\n            onChange={(event) => setUnit(event.target.value)}\n            value={unit}\n            min='0'\n            defaultValue='0'\n          />\n        </Col>\n        <Col style={{ paddingRight: '0.5rem', maxWidth: '7rem' }}>\n          <Input type='select' value={selectedUnit} onChange={(event) => selectUnit(event.target.value)}>\n            <option value='unit'>Units</option>\n            {(drink === 'spirit') && <option value='oz'>Ounces</option>}\n          </Input>\n        </Col>\n        <Col>\n          <Input type='select' value={drink} onChange={(event) => setDrink(event.target.value)}>\n            <option value='spirit'>Spirit (40% ABV)</option>\n            <option value='beer'>Beer (5% ABV)</option>\n            {/* <option value='wine'>Wine</option> */}\n          </Input>\n        </Col>\n      </Row>\n      <Row>\n        <Col style={{ padding: '1rem 0.25rem 0.25rem 1.5rem' }}>\n          <p>{(checkIfOz(gramsPerUnit) > 1000) ? checkIfOz(gramsPerUnit / 1000).toFixed(2) * 1 + 'kg of sugar' : checkIfOz(gramsPerUnit).toFixed(1) * 1 + ' grams of sugar'}</p>\n          <p>{((unitTypes[selectedUnit]) / 3).toFixed(1) * 1} cubes of sugar</p>\n          <p>{Math.floor((unitTypes[selectedUnit]) / 51.67 * 100)}% RDA for sugar</p>\n          <p>{(unitTypes[selectedUnit] / 26.05).toFixed(1) * 1} mars bars (sugar content)</p>\n          <p>\n            {(minsOfWalking > 60)\n              ? checkIfOz((minsOfWalking / 60)).toFixed(1) * 1 + ' hours of walking'\n              : checkIfOz(minsOfWalking) + ' minutes of walking'\n            }\n          </p>\n          <p>Calories: {Math.floor(checkIfOz(caloriesPerUnit))}</p>\n          <p>{Math.floor(checkIfOz(caloriesPerUnit / 2000 * 100))}% RDA of calories (2000/kcal)</p>\n          <p>ml: {checkIfOz(mlPerUnit)}</p>\n          {(selectedUnit === 'unit') && <p>Ounces: {mlToOz * 1}</p>}\n        </Col>\n      </Row>\n      <Row>\n        <footer>\n          <p></p>\n        </footer>\n      </Row>\n    </Layout>\n  )\n}\n\nexport default SugarAlcoholCalculator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SugarAlcoholCalculator from './SugarAlcoholCalculator';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<SugarAlcoholCalculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}